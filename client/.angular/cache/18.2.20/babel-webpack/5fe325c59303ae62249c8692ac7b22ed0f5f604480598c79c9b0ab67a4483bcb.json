{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/teste/Desktop/vr_desafio/AsyncNotify/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Sistema de Notificações - Frontend Vanilla TypeScript\nimport { v4 as uuidv4 } from 'uuid';\nclass NotificationSystem {\n  constructor() {\n    this.stats = {\n      pending: 0,\n      processing: 0,\n      completed: 0,\n      failed: 0\n    };\n    this.messages = [];\n    this.initializeApp();\n    this.connectWebSocket();\n    this.loadInitialData();\n  }\n  initializeApp() {\n    document.body.innerHTML = `\n      <div class=\"min-h-screen bg-gray-50\">\n        <header class=\"bg-white shadow-sm border-b\">\n          <div class=\"max-w-7xl mx-auto px-4\">\n            <div class=\"flex justify-between h-16\">\n              <div class=\"flex items-center\">\n                <h1 class=\"text-xl font-semibold text-gray-900\">\n                  Sistema de Notificações\n                </h1>\n              </div>\n            </div>\n          </div>\n        </header>\n        \n        <main class=\"max-w-7xl mx-auto py-6 px-4\">\n          <div class=\"border-4 border-dashed border-gray-200 rounded-lg p-6\">\n            \n            <!-- Título e descrição -->\n            <div class=\"mb-8\">\n              <h2 class=\"text-2xl font-bold text-gray-900 mb-2\">\n                Painel de Notificações\n              </h2>\n              <p class=\"text-gray-600\">\n                Envie notificações e acompanhe o processamento em tempo real\n              </p>\n            </div>\n\n            <!-- Estatísticas em tempo real -->\n            <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n              <div class=\"bg-blue-50 p-4 rounded-lg\">\n                <div class=\"text-2xl font-bold text-blue-600\" id=\"pending-count\">0</div>\n                <div class=\"text-sm text-blue-800\">Pendentes</div>\n              </div>\n              <div class=\"bg-yellow-50 p-4 rounded-lg\">\n                <div class=\"text-2xl font-bold text-yellow-600\" id=\"processing-count\">0</div>\n                <div class=\"text-sm text-yellow-800\">Processando</div>\n              </div>\n              <div class=\"bg-green-50 p-4 rounded-lg\">\n                <div class=\"text-2xl font-bold text-green-600\" id=\"completed-count\">0</div>\n                <div class=\"text-sm text-green-800\">Concluídas</div>\n              </div>\n              <div class=\"bg-red-50 p-4 rounded-lg\">\n                <div class=\"text-2xl font-bold text-red-600\" id=\"failed-count\">0</div>\n                <div class=\"text-sm text-red-800\">Falharam</div>\n              </div>\n            </div>\n\n            <!-- Formulário de notificação -->\n            <div class=\"bg-white shadow rounded-lg p-6 mb-8\">\n              <h3 class=\"text-lg font-medium text-gray-900 mb-4\">\n                Enviar Nova Notificação\n              </h3>\n              \n              <form id=\"notification-form\" class=\"space-y-4\">\n                <div>\n                  <label for=\"mensagemId\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n                    ID da Mensagem (UUID)\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"mensagemId\"\n                    name=\"mensagemId\"\n                    placeholder=\"550e8400-e29b-41d4-a716-446655440000\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 cursor-not-allowed\"\n                    readonly\n                    required\n                  />\n                  <div id=\"mensagemId-error\" class=\"mt-1 text-sm text-red-600\" style=\"display: none;\"></div>\n                </div>\n\n                <div>\n                  <label for=\"conteudoMensagem\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Conteúdo da Mensagem\n                  </label>\n                  <textarea\n                    id=\"conteudoMensagem\"\n                    name=\"conteudoMensagem\"\n                    rows=\"4\"\n                    placeholder=\"Digite o conteúdo da sua notificação aqui...\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    required\n                  ></textarea>\n                  <div id=\"conteudoMensagem-error\" class=\"mt-1 text-sm text-red-600\" style=\"display: none;\"></div>\n                </div>\n\n                <div class=\"flex justify-between items-center\">\n                  <button\n                    type=\"submit\"\n                    id=\"submit-btn\"\n                    class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    Enviar Notificação\n                  </button>\n                  \n                  <button\n                    type=\"button\"\n                    id=\"generate-uuid-btn\"\n                    class=\"bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                  >\n                    Gerar UUID\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            <!-- Mensagens de sucesso/erro -->\n            <div id=\"message-container\" style=\"display: none;\" class=\"mb-6\">\n              <div id=\"message\" class=\"p-4 rounded-md\"></div>\n            </div>\n\n            <!-- Lista de mensagens enviadas -->\n            <div class=\"bg-white shadow rounded-lg\">\n              <div class=\"px-6 py-4 border-b border-gray-200\">\n                <h3 class=\"text-lg font-medium text-gray-900\">\n                  Status das Mensagens\n                </h3>\n              </div>\n              \n              <div id=\"messages-list\" class=\"divide-y divide-gray-200\">\n                <div class=\"px-6 py-4 text-gray-500 text-center\">\n                  Nenhuma mensagem enviada ainda\n                </div>\n              </div>\n              \n              <div class=\"px-6 py-3 bg-gray-50 border-t border-gray-200\">\n                <button\n                  id=\"refresh-btn\"\n                  class=\"text-sm text-blue-600 hover:text-blue-800 focus:outline-none\"\n                >\n                  Atualizar Status\n                </button>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    `;\n    this.setupEventListeners();\n    this.generateUUID();\n  }\n  setupEventListeners() {\n    const form = document.getElementById('notification-form');\n    const generateBtn = document.getElementById('generate-uuid-btn');\n    const refreshBtn = document.getElementById('refresh-btn');\n    form.addEventListener('submit', e => {\n      e.preventDefault();\n      this.handleSubmit();\n    });\n    generateBtn.addEventListener('click', () => {\n      this.generateUUID();\n    });\n    refreshBtn.addEventListener('click', () => {\n      this.refreshStatus();\n    });\n  }\n  handleSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const form = document.getElementById('notification-form');\n      const submitBtn = document.getElementById('submit-btn');\n      const formData = new FormData(form);\n      const notification = {\n        mensagemId: formData.get('mensagemId'),\n        conteudoMensagem: formData.get('conteudoMensagem')\n      };\n      // Validação básica\n      if (!_this.validateUUID(notification.mensagemId)) {\n        _this.showError('mensagemId', 'Por favor, insira um UUID válido');\n        return;\n      }\n      if (!notification.conteudoMensagem.trim()) {\n        _this.showError('conteudoMensagem', 'O conteúdo da mensagem é obrigatório');\n        return;\n      }\n      _this.clearErrors();\n      submitBtn.disabled = true;\n      submitBtn.textContent = 'Enviando...';\n      try {\n        const response = yield fetch('/api/notificar', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(notification)\n        });\n        const result = yield response.json();\n        if (response.ok) {\n          _this.showMessage(`Notificação enviada com sucesso! ID: ${result.mensagemId}`, 'success');\n          // Adicionar imediatamente à lista com status \"AGUARDANDO PROCESSAMENTO\"\n          _this.addMessageToList({\n            mensagemId: notification.mensagemId,\n            status: 'AGUARDANDO_PROCESSAMENTO'\n          });\n          // Incrementar contador de pendentes\n          _this.updateStatsFromMessage('AGUARDANDO_PROCESSAMENTO');\n          _this.generateUUID();\n          document.getElementById('conteudoMensagem').value = '';\n          _this.refreshStatus();\n        } else {\n          const errorData = result;\n          _this.showMessage(errorData.erro || 'Erro ao enviar notificação', 'error');\n        }\n      } catch (error) {\n        _this.showMessage('Erro de conexão ao enviar notificação', 'error');\n      } finally {\n        submitBtn.disabled = false;\n        submitBtn.textContent = 'Enviar Notificação';\n      }\n    })();\n  }\n  generateUUID() {\n    const uuid = uuidv4();\n    document.getElementById('mensagemId').value = uuid;\n  }\n  validateUUID(uuid) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n  }\n  showError(field, message) {\n    const errorElement = document.getElementById(`${field}-error`);\n    const inputElement = document.getElementById(field);\n    if (errorElement && inputElement) {\n      errorElement.textContent = message;\n      errorElement.style.display = 'block';\n      inputElement.classList.add('border-red-500');\n    }\n  }\n  clearErrors() {\n    const errorElements = document.querySelectorAll('[id$=\"-error\"]');\n    const inputElements = document.querySelectorAll('input, textarea');\n    errorElements.forEach(el => {\n      el.style.display = 'none';\n    });\n    inputElements.forEach(el => {\n      el.classList.remove('border-red-500');\n    });\n  }\n  showMessage(text, type) {\n    const container = document.getElementById('message-container');\n    const message = document.getElementById('message');\n    message.textContent = text;\n    message.className = type === 'success' ? 'p-4 rounded-md bg-green-50 border border-green-200 text-green-800' : 'p-4 rounded-md bg-red-50 border border-red-200 text-red-800';\n    container.style.display = 'block';\n    setTimeout(() => {\n      container.style.display = 'none';\n    }, 5000);\n  }\n  refreshStatus() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const refreshBtn = document.getElementById('refresh-btn');\n      refreshBtn.disabled = true;\n      refreshBtn.textContent = 'Atualizando...';\n      try {\n        const response = yield fetch('/api/status');\n        const result = yield response.json();\n        if (result.sucesso && result.mensagens) {\n          _this2.messages = result.mensagens;\n          _this2.updateMessagesList();\n        }\n      } catch (error) {\n        console.error('Erro ao carregar status:', error);\n      } finally {\n        refreshBtn.disabled = false;\n        refreshBtn.textContent = 'Atualizar Status';\n      }\n    })();\n  }\n  addMessageToList(message) {\n    // Verificar se a mensagem já existe na lista\n    const existingIndex = this.messages.findIndex(m => m.mensagemId === message.mensagemId);\n    if (existingIndex >= 0) {\n      // Atualizar status da mensagem existente\n      this.messages[existingIndex].status = message.status;\n    } else {\n      // Adicionar nova mensagem no início da lista\n      this.messages.unshift(message);\n    }\n    this.updateMessagesList();\n  }\n  updateMessagesList() {\n    const container = document.getElementById('messages-list');\n    if (this.messages.length === 0) {\n      container.innerHTML = `\n        <div class=\"px-6 py-4 text-gray-500 text-center\">\n          Nenhuma mensagem enviada ainda\n        </div>\n      `;\n      return;\n    }\n    container.innerHTML = this.messages.map(msg => `\n      <div class=\"px-6 py-4\">\n        <div class=\"flex items-center justify-between\">\n          <div class=\"flex-1\">\n            <div class=\"text-sm font-medium text-gray-900\">\n              ${msg.mensagemId}\n            </div>\n          </div>\n          <div class=\"ml-4\">\n            <span class=\"${this.getStatusClass(msg.status)} px-2 py-1 text-xs font-medium rounded-full\">\n              ${this.getStatusText(msg.status)}\n            </span>\n          </div>\n        </div>\n      </div>\n    `).join('');\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case 'PROCESSADO_SUCESSO':\n        return 'bg-green-100 text-green-800';\n      case 'FALHA_PROCESSAMENTO':\n        return 'bg-red-100 text-red-800';\n      case 'AGUARDANDO_PROCESSAMENTO':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'PROCESSANDO':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  }\n  getStatusText(status) {\n    switch (status) {\n      case 'PROCESSADO_SUCESSO':\n        return 'Sucesso';\n      case 'FALHA_PROCESSAMENTO':\n        return 'Falha';\n      case 'AGUARDANDO_PROCESSAMENTO':\n        return 'Aguardando Processamento';\n      case 'PROCESSANDO':\n        return 'Processando';\n      default:\n        return status;\n    }\n  }\n  updateStats() {\n    document.getElementById('pending-count').textContent = this.stats.pending.toString();\n    document.getElementById('processing-count').textContent = this.stats.processing.toString();\n    document.getElementById('completed-count').textContent = this.stats.completed.toString();\n    document.getElementById('failed-count').textContent = this.stats.failed.toString();\n  }\n  updateStatsFromMessage(status) {\n    // Atualizar contadores locais baseado no status da mensagem\n    switch (status) {\n      case 'AGUARDANDO_PROCESSAMENTO':\n        this.stats.pending++;\n        break;\n      case 'PROCESSANDO':\n        this.stats.pending = Math.max(0, this.stats.pending - 1);\n        this.stats.processing++;\n        break;\n      case 'PROCESSADO_SUCESSO':\n        this.stats.processing = Math.max(0, this.stats.processing - 1);\n        this.stats.completed++;\n        break;\n      case 'FALHA_PROCESSAMENTO':\n        this.stats.processing = Math.max(0, this.stats.processing - 1);\n        this.stats.failed++;\n        break;\n    }\n    this.updateStats();\n  }\n  connectWebSocket() {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    this.websocket = new WebSocket(wsUrl);\n    this.websocket.onopen = () => {\n      console.log('WebSocket conectado');\n    };\n    this.websocket.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'queue-stats' || data.type === 'queue_stats') {\n          this.stats = data.stats;\n          this.updateStats();\n        } else if (data.type === 'message-status-update') {\n          // Atualizar status específico de uma mensagem\n          this.addMessageToList({\n            mensagemId: data.mensagemId,\n            status: data.status\n          });\n          // Atualizar estatísticas localmente baseado no status da mensagem\n          this.updateStatsFromMessage(data.status);\n        }\n      } catch (error) {\n        console.error('Erro ao processar mensagem WebSocket:', error);\n      }\n    };\n    this.websocket.onclose = () => {\n      console.log('WebSocket desconectado - tentando reconectar em 3 segundos');\n      setTimeout(() => this.connectWebSocket(), 3000);\n    };\n    this.websocket.onerror = error => {\n      console.error('Erro no WebSocket:', error);\n    };\n  }\n  loadInitialData() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Carregar estatísticas iniciais\n        const statsResponse = yield fetch('/api/queue/stats');\n        const statsResult = yield statsResponse.json();\n        if (statsResult.success) {\n          _this3.stats = statsResult.stats;\n          _this3.updateStats();\n        }\n        // Carregar mensagens existentes\n        _this3.refreshStatus();\n      } catch (error) {\n        console.error('Erro ao carregar dados iniciais:', error);\n      }\n    })();\n  }\n}\n// Inicializar aplicação quando DOM estiver pronto\ndocument.addEventListener('DOMContentLoaded', () => {\n  new NotificationSystem();\n});","map":{"version":3,"names":["v4","uuidv4","NotificationSystem","constructor","stats","pending","processing","completed","failed","messages","initializeApp","connectWebSocket","loadInitialData","document","body","innerHTML","setupEventListeners","generateUUID","form","getElementById","generateBtn","refreshBtn","addEventListener","e","preventDefault","handleSubmit","refreshStatus","_this","_asyncToGenerator","submitBtn","formData","FormData","notification","mensagemId","get","conteudoMensagem","validateUUID","showError","trim","clearErrors","disabled","textContent","response","fetch","method","headers","JSON","stringify","result","json","ok","showMessage","addMessageToList","status","updateStatsFromMessage","value","errorData","erro","error","uuid","uuidRegex","test","field","message","errorElement","inputElement","style","display","classList","add","errorElements","querySelectorAll","inputElements","forEach","el","remove","text","type","container","className","setTimeout","_this2","sucesso","mensagens","updateMessagesList","console","existingIndex","findIndex","m","unshift","length","map","msg","getStatusClass","getStatusText","join","updateStats","toString","Math","max","protocol","window","location","wsUrl","host","websocket","WebSocket","onopen","log","onmessage","event","data","parse","onclose","onerror","_this3","statsResponse","statsResult","success"],"sources":["C:\\Users\\teste\\Desktop\\vr_desafio\\AsyncNotify\\client\\src\\main.ts"],"sourcesContent":["// Sistema de Notificações - Frontend Vanilla TypeScript\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface NotificationRequest {\r\n  mensagemId: string;\r\n  conteudoMensagem: string;\r\n}\r\n\r\ninterface NotificationResponse {\r\n  mensagemId: string;\r\n  status: string;\r\n  mensagem: string;\r\n}\r\n\r\ninterface StatusResponse {\r\n  sucesso: boolean;\r\n  mensagemId?: string;\r\n  status?: string;\r\n  mensagens?: Array<{mensagemId: string; status: string}>;\r\n}\r\n\r\ninterface QueueStats {\r\n  success: boolean;\r\n  stats: {\r\n    pending: number;\r\n    processing: number;\r\n    completed: number;\r\n    failed: number;\r\n  };\r\n}\r\n\r\nclass NotificationSystem {\r\n  private websocket?: WebSocket;\r\n  private stats = { pending: 0, processing: 0, completed: 0, failed: 0 };\r\n  private messages: Array<{mensagemId: string; status: string}> = [];\r\n\r\n  constructor() {\r\n    this.initializeApp();\r\n    this.connectWebSocket();\r\n    this.loadInitialData();\r\n  }\r\n\r\n  private initializeApp(): void {\r\n    document.body.innerHTML = `\r\n      <div class=\"min-h-screen bg-gray-50\">\r\n        <header class=\"bg-white shadow-sm border-b\">\r\n          <div class=\"max-w-7xl mx-auto px-4\">\r\n            <div class=\"flex justify-between h-16\">\r\n              <div class=\"flex items-center\">\r\n                <h1 class=\"text-xl font-semibold text-gray-900\">\r\n                  Sistema de Notificações\r\n                </h1>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        \r\n        <main class=\"max-w-7xl mx-auto py-6 px-4\">\r\n          <div class=\"border-4 border-dashed border-gray-200 rounded-lg p-6\">\r\n            \r\n            <!-- Título e descrição -->\r\n            <div class=\"mb-8\">\r\n              <h2 class=\"text-2xl font-bold text-gray-900 mb-2\">\r\n                Painel de Notificações\r\n              </h2>\r\n              <p class=\"text-gray-600\">\r\n                Envie notificações e acompanhe o processamento em tempo real\r\n              </p>\r\n            </div>\r\n\r\n            <!-- Estatísticas em tempo real -->\r\n            <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\r\n              <div class=\"bg-blue-50 p-4 rounded-lg\">\r\n                <div class=\"text-2xl font-bold text-blue-600\" id=\"pending-count\">0</div>\r\n                <div class=\"text-sm text-blue-800\">Pendentes</div>\r\n              </div>\r\n              <div class=\"bg-yellow-50 p-4 rounded-lg\">\r\n                <div class=\"text-2xl font-bold text-yellow-600\" id=\"processing-count\">0</div>\r\n                <div class=\"text-sm text-yellow-800\">Processando</div>\r\n              </div>\r\n              <div class=\"bg-green-50 p-4 rounded-lg\">\r\n                <div class=\"text-2xl font-bold text-green-600\" id=\"completed-count\">0</div>\r\n                <div class=\"text-sm text-green-800\">Concluídas</div>\r\n              </div>\r\n              <div class=\"bg-red-50 p-4 rounded-lg\">\r\n                <div class=\"text-2xl font-bold text-red-600\" id=\"failed-count\">0</div>\r\n                <div class=\"text-sm text-red-800\">Falharam</div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Formulário de notificação -->\r\n            <div class=\"bg-white shadow rounded-lg p-6 mb-8\">\r\n              <h3 class=\"text-lg font-medium text-gray-900 mb-4\">\r\n                Enviar Nova Notificação\r\n              </h3>\r\n              \r\n              <form id=\"notification-form\" class=\"space-y-4\">\r\n                <div>\r\n                  <label for=\"mensagemId\" class=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    ID da Mensagem (UUID)\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"mensagemId\"\r\n                    name=\"mensagemId\"\r\n                    placeholder=\"550e8400-e29b-41d4-a716-446655440000\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 cursor-not-allowed\"\r\n                    readonly\r\n                    required\r\n                  />\r\n                  <div id=\"mensagemId-error\" class=\"mt-1 text-sm text-red-600\" style=\"display: none;\"></div>\r\n                </div>\r\n\r\n                <div>\r\n                  <label for=\"conteudoMensagem\" class=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Conteúdo da Mensagem\r\n                  </label>\r\n                  <textarea\r\n                    id=\"conteudoMensagem\"\r\n                    name=\"conteudoMensagem\"\r\n                    rows=\"4\"\r\n                    placeholder=\"Digite o conteúdo da sua notificação aqui...\"\r\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                    required\r\n                  ></textarea>\r\n                  <div id=\"conteudoMensagem-error\" class=\"mt-1 text-sm text-red-600\" style=\"display: none;\"></div>\r\n                </div>\r\n\r\n                <div class=\"flex justify-between items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    id=\"submit-btn\"\r\n                    class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                  >\r\n                    Enviar Notificação\r\n                  </button>\r\n                  \r\n                  <button\r\n                    type=\"button\"\r\n                    id=\"generate-uuid-btn\"\r\n                    class=\"bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500\"\r\n                  >\r\n                    Gerar UUID\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n\r\n            <!-- Mensagens de sucesso/erro -->\r\n            <div id=\"message-container\" style=\"display: none;\" class=\"mb-6\">\r\n              <div id=\"message\" class=\"p-4 rounded-md\"></div>\r\n            </div>\r\n\r\n            <!-- Lista de mensagens enviadas -->\r\n            <div class=\"bg-white shadow rounded-lg\">\r\n              <div class=\"px-6 py-4 border-b border-gray-200\">\r\n                <h3 class=\"text-lg font-medium text-gray-900\">\r\n                  Status das Mensagens\r\n                </h3>\r\n              </div>\r\n              \r\n              <div id=\"messages-list\" class=\"divide-y divide-gray-200\">\r\n                <div class=\"px-6 py-4 text-gray-500 text-center\">\r\n                  Nenhuma mensagem enviada ainda\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"px-6 py-3 bg-gray-50 border-t border-gray-200\">\r\n                <button\r\n                  id=\"refresh-btn\"\r\n                  class=\"text-sm text-blue-600 hover:text-blue-800 focus:outline-none\"\r\n                >\r\n                  Atualizar Status\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    `;\r\n\r\n    this.setupEventListeners();\r\n    this.generateUUID();\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    const form = document.getElementById('notification-form') as HTMLFormElement;\r\n    const generateBtn = document.getElementById('generate-uuid-btn') as HTMLButtonElement;\r\n    const refreshBtn = document.getElementById('refresh-btn') as HTMLButtonElement;\r\n\r\n    form.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n      this.handleSubmit();\r\n    });\r\n\r\n    generateBtn.addEventListener('click', () => {\r\n      this.generateUUID();\r\n    });\r\n\r\n    refreshBtn.addEventListener('click', () => {\r\n      this.refreshStatus();\r\n    });\r\n  }\r\n\r\n  private async handleSubmit(): Promise<void> {\r\n    const form = document.getElementById('notification-form') as HTMLFormElement;\r\n    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;\r\n    const formData = new FormData(form);\r\n    \r\n    const notification: NotificationRequest = {\r\n      mensagemId: formData.get('mensagemId') as string,\r\n      conteudoMensagem: formData.get('conteudoMensagem') as string\r\n    };\r\n\r\n    // Validação básica\r\n    if (!this.validateUUID(notification.mensagemId)) {\r\n      this.showError('mensagemId', 'Por favor, insira um UUID válido');\r\n      return;\r\n    }\r\n\r\n    if (!notification.conteudoMensagem.trim()) {\r\n      this.showError('conteudoMensagem', 'O conteúdo da mensagem é obrigatório');\r\n      return;\r\n    }\r\n\r\n    this.clearErrors();\r\n    submitBtn.disabled = true;\r\n    submitBtn.textContent = 'Enviando...';\r\n\r\n    try {\r\n      const response = await fetch('/api/notificar', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(notification),\r\n      });\r\n\r\n      const result: NotificationResponse = await response.json();\r\n\r\n      if (response.ok) {\r\n        this.showMessage(`Notificação enviada com sucesso! ID: ${result.mensagemId}`, 'success');\r\n        \r\n        // Adicionar imediatamente à lista com status \"AGUARDANDO PROCESSAMENTO\"\r\n        this.addMessageToList({\r\n          mensagemId: notification.mensagemId,\r\n          status: 'AGUARDANDO_PROCESSAMENTO'\r\n        });\r\n        \r\n        // Incrementar contador de pendentes\r\n        this.updateStatsFromMessage('AGUARDANDO_PROCESSAMENTO');\r\n        \r\n        this.generateUUID();\r\n        (document.getElementById('conteudoMensagem') as HTMLTextAreaElement).value = '';\r\n        this.refreshStatus();\r\n      } else {\r\n        const errorData = result as any;\r\n        this.showMessage(errorData.erro || 'Erro ao enviar notificação', 'error');\r\n      }\r\n    } catch (error) {\r\n      this.showMessage('Erro de conexão ao enviar notificação', 'error');\r\n    } finally {\r\n      submitBtn.disabled = false;\r\n      submitBtn.textContent = 'Enviar Notificação';\r\n    }\r\n  }\r\n\r\n  private generateUUID(): void {\r\n    const uuid = uuidv4();\r\n    (document.getElementById('mensagemId') as HTMLInputElement).value = uuid;\r\n  }\r\n\r\n  private validateUUID(uuid: string): boolean {\r\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n    return uuidRegex.test(uuid);\r\n  }\r\n\r\n  private showError(field: string, message: string): void {\r\n    const errorElement = document.getElementById(`${field}-error`);\r\n    const inputElement = document.getElementById(field);\r\n    \r\n    if (errorElement && inputElement) {\r\n      errorElement.textContent = message;\r\n      errorElement.style.display = 'block';\r\n      inputElement.classList.add('border-red-500');\r\n    }\r\n  }\r\n\r\n  private clearErrors(): void {\r\n    const errorElements = document.querySelectorAll('[id$=\"-error\"]');\r\n    const inputElements = document.querySelectorAll('input, textarea');\r\n    \r\n    errorElements.forEach(el => {\r\n      (el as HTMLElement).style.display = 'none';\r\n    });\r\n    \r\n    inputElements.forEach(el => {\r\n      el.classList.remove('border-red-500');\r\n    });\r\n  }\r\n\r\n  private showMessage(text: string, type: 'success' | 'error'): void {\r\n    const container = document.getElementById('message-container') as HTMLElement;\r\n    const message = document.getElementById('message') as HTMLElement;\r\n    \r\n    message.textContent = text;\r\n    message.className = type === 'success' \r\n      ? 'p-4 rounded-md bg-green-50 border border-green-200 text-green-800'\r\n      : 'p-4 rounded-md bg-red-50 border border-red-200 text-red-800';\r\n    \r\n    container.style.display = 'block';\r\n    \r\n    setTimeout(() => {\r\n      container.style.display = 'none';\r\n    }, 5000);\r\n  }\r\n\r\n  private async refreshStatus(): Promise<void> {\r\n    const refreshBtn = document.getElementById('refresh-btn') as HTMLButtonElement;\r\n    refreshBtn.disabled = true;\r\n    refreshBtn.textContent = 'Atualizando...';\r\n\r\n    try {\r\n      const response = await fetch('/api/status');\r\n      const result: StatusResponse = await response.json();\r\n\r\n      if (result.sucesso && result.mensagens) {\r\n        this.messages = result.mensagens;\r\n        this.updateMessagesList();\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao carregar status:', error);\r\n    } finally {\r\n      refreshBtn.disabled = false;\r\n      refreshBtn.textContent = 'Atualizar Status';\r\n    }\r\n  }\r\n\r\n  private addMessageToList(message: {mensagemId: string; status: string}): void {\r\n    // Verificar se a mensagem já existe na lista\r\n    const existingIndex = this.messages.findIndex(m => m.mensagemId === message.mensagemId);\r\n    \r\n    if (existingIndex >= 0) {\r\n      // Atualizar status da mensagem existente\r\n      this.messages[existingIndex].status = message.status;\r\n    } else {\r\n      // Adicionar nova mensagem no início da lista\r\n      this.messages.unshift(message);\r\n    }\r\n    \r\n    this.updateMessagesList();\r\n  }\r\n\r\n  private updateMessagesList(): void {\r\n    const container = document.getElementById('messages-list') as HTMLElement;\r\n    \r\n    if (this.messages.length === 0) {\r\n      container.innerHTML = `\r\n        <div class=\"px-6 py-4 text-gray-500 text-center\">\r\n          Nenhuma mensagem enviada ainda\r\n        </div>\r\n      `;\r\n      return;\r\n    }\r\n\r\n    container.innerHTML = this.messages.map(msg => `\r\n      <div class=\"px-6 py-4\">\r\n        <div class=\"flex items-center justify-between\">\r\n          <div class=\"flex-1\">\r\n            <div class=\"text-sm font-medium text-gray-900\">\r\n              ${msg.mensagemId}\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-4\">\r\n            <span class=\"${this.getStatusClass(msg.status)} px-2 py-1 text-xs font-medium rounded-full\">\r\n              ${this.getStatusText(msg.status)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `).join('');\r\n  }\r\n\r\n  private getStatusClass(status: string): string {\r\n    switch (status) {\r\n      case 'PROCESSADO_SUCESSO':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'FALHA_PROCESSAMENTO':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'AGUARDANDO_PROCESSAMENTO':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'PROCESSANDO':\r\n        return 'bg-blue-100 text-blue-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  }\r\n\r\n  private getStatusText(status: string): string {\r\n    switch (status) {\r\n      case 'PROCESSADO_SUCESSO':\r\n        return 'Sucesso';\r\n      case 'FALHA_PROCESSAMENTO':\r\n        return 'Falha';\r\n      case 'AGUARDANDO_PROCESSAMENTO':\r\n        return 'Aguardando Processamento';\r\n      case 'PROCESSANDO':\r\n        return 'Processando';\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  private updateStats(): void {\r\n    document.getElementById('pending-count')!.textContent = this.stats.pending.toString();\r\n    document.getElementById('processing-count')!.textContent = this.stats.processing.toString();\r\n    document.getElementById('completed-count')!.textContent = this.stats.completed.toString();\r\n    document.getElementById('failed-count')!.textContent = this.stats.failed.toString();\r\n  }\r\n\r\n  private updateStatsFromMessage(status: string): void {\r\n    // Atualizar contadores locais baseado no status da mensagem\r\n    switch (status) {\r\n      case 'AGUARDANDO_PROCESSAMENTO':\r\n        this.stats.pending++;\r\n        break;\r\n      case 'PROCESSANDO':\r\n        this.stats.pending = Math.max(0, this.stats.pending - 1);\r\n        this.stats.processing++;\r\n        break;\r\n      case 'PROCESSADO_SUCESSO':\r\n        this.stats.processing = Math.max(0, this.stats.processing - 1);\r\n        this.stats.completed++;\r\n        break;\r\n      case 'FALHA_PROCESSAMENTO':\r\n        this.stats.processing = Math.max(0, this.stats.processing - 1);\r\n        this.stats.failed++;\r\n        break;\r\n    }\r\n    this.updateStats();\r\n  }\r\n\r\n  private connectWebSocket(): void {\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\r\n    \r\n    this.websocket = new WebSocket(wsUrl);\r\n    \r\n    this.websocket.onopen = () => {\r\n      console.log('WebSocket conectado');\r\n    };\r\n    \r\n    this.websocket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        if (data.type === 'queue-stats' || data.type === 'queue_stats') {\r\n          this.stats = data.stats;\r\n          this.updateStats();\r\n        } else if (data.type === 'message-status-update') {\r\n          // Atualizar status específico de uma mensagem\r\n          this.addMessageToList({\r\n            mensagemId: data.mensagemId,\r\n            status: data.status\r\n          });\r\n          // Atualizar estatísticas localmente baseado no status da mensagem\r\n          this.updateStatsFromMessage(data.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao processar mensagem WebSocket:', error);\r\n      }\r\n    };\r\n    \r\n    this.websocket.onclose = () => {\r\n      console.log('WebSocket desconectado - tentando reconectar em 3 segundos');\r\n      setTimeout(() => this.connectWebSocket(), 3000);\r\n    };\r\n    \r\n    this.websocket.onerror = (error) => {\r\n      console.error('Erro no WebSocket:', error);\r\n    };\r\n  }\r\n\r\n  private async loadInitialData(): Promise<void> {\r\n    try {\r\n      // Carregar estatísticas iniciais\r\n      const statsResponse = await fetch('/api/queue/stats');\r\n      const statsResult: QueueStats = await statsResponse.json();\r\n      \r\n      if (statsResult.success) {\r\n        this.stats = statsResult.stats;\r\n        this.updateStats();\r\n      }\r\n\r\n      // Carregar mensagens existentes\r\n      this.refreshStatus();\r\n    } catch (error) {\r\n      console.error('Erro ao carregar dados iniciais:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Inicializar aplicação quando DOM estiver pronto\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  new NotificationSystem();\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}